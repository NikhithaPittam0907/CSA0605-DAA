import heapq
from collections import defaultdict
def networkDelayTime(times, n, k):
    graph = defaultdict(list)
    for u, v, w in times:
        graph[u].append((v, w))
    min_heap = [(0, k)]  
    time_to_reach = {i: float('inf') for i in range(1, n + 1)}
    time_to_reach[k] = 0
    while min_heap:
        current_time, node = heapq.heappop(min_heap)
        if current_time > time_to_reach[node]:
            continue
        for neighbor, travel_time in graph[node]:
            new_time = current_time + travel_time
            if new_time < time_to_reach[neighbor]:
                time_to_reach[neighbor] = new_time
                heapq.heappush(min_heap, (new_time, neighbor))
    max_time = max(time_to_reach.values())
    return max_time if max_time < float('inf') else -1
print(networkDelayTime([[2,1,1],[2,3,1],[3,4,1]], 4, 2))
print(networkDelayTime([[1,2,1]], 2, 1))  
print(networkDelayTime([[1,2,1]], 2, 2))  
