import heapq
from collections import defaultdict
def findTheCity(n, edges, distanceThreshold):
    graph = defaultdict(list)
    for u, v, w in edges:
        graph[u].append((v, w))
        graph[v].append((u, w))
    def dijkstra(start):
        distances = [float('inf')] * n
        distances[start] = 0
        min_heap = [(0, start)]
        while min_heap:
            current_distance, current_node = heapq.heappop(min_heap)
            if current_distance > distances[current_node]:
                continue
            for neighbor, weight in graph[current_node]:
                distance = current_distance + weight
                if distance < distances[neighbor]:
                    distances[neighbor] = distance
                    heapq.heappush(min_heap, (distance, neighbor))
        return distances
    city_count = float('inf')
    city_index = -1
    for i in range(n):
        reachable_cities = sum(1 for d in dijkstra(i) if d <= distanceThreshold)
        if (reachable_cities < city_count) or (reachable_cities == city_count and i > city_index):
            city_count = reachable_cities
            city_index = i
    return city_index
n = 4
edges = [[0,1,3],[1,2,1],[1,3,4],[2,3,1]]
distanceThreshold = 4
print(findTheCity(n, edges, distanceThreshold))  # Output: 3
