import numpy as np

# Initialize the distance matrix
def initialize_distance_matrix(num_cities, edges):
    distance_matrix = np.full((num_cities, num_cities), np.inf)
    for i in range(num_cities):
        distance_matrix[i][i] = 0
    for (src, dest, weight) in edges:
        distance_matrix[src][dest] = weight
    return distance_matrix

# Floyd-Warshall Algorithm
def floyd_warshall(distance_matrix):
    num_cities = distance_matrix.shape[0]
    for k in range(num_cities):
        for i in range(num_cities):
            for j in range(num_cities):
                if distance_matrix[i][j] > distance_matrix[i][k] + distance_matrix[k][j]:
                    distance_matrix[i][j] = distance_matrix[i][k] + distance_matrix[k][j]
    return distance_matrix

# Example usage
num_cities = 4
edges = [(0, 1, 3), (0, 2, 5), (1, 2, 1), (2, 3, 2)]
distance_matrix = initialize_distance_matrix(num_cities, edges)

print("Distance Matrix Before:")
print(distance_matrix)

shortest_paths = floyd_warshall(distance_matrix)

print("Distance Matrix After:")
print(shortest_paths)
