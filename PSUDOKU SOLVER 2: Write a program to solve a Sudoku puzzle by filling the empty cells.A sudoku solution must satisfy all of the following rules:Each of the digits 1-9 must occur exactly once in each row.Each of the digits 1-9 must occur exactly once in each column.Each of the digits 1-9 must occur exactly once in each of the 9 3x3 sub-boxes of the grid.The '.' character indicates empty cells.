def is_valid(board, row, col, num):
    # Check if the number is not repeated in the current row
    for i in range(9):
        if board[row][i] == num:
            return False
    
    # Check if the number is not repeated in the current column
    for i in range(9):
        if board[i][col] == num:
            return False
    
    # Check if the number is not repeated in the 3x3 sub-box
    start_row, start_col = 3 * (row // 3), 3 * (col // 3)
    for i in range(start_row, start_row + 3):
        for j in range(start_col, start_col + 3):
            if board[i][j] == num:
                return False
    
    return True

def solve_sudoku(board):
    # Find an empty cell
    for row in range(9):
        for col in range(9):
            if board[row][col] == '.':
                # Try all numbers from 1 to 9
                for num in '123456789':
                    if is_valid(board, row, col, num):
                        board[row][col] = num
                        if solve_sudoku(board):
                            return True
                        board[row][col] = '.'  # Undo the move
                return False  # No valid number found, backtrack
    return True  # No empty cell found, puzzle solved

def print_board(board):
    for row in board:
        print(' '.join(row))

# Example Sudoku puzzle
board = [
    ["5", "3", ".", ".", "7", ".", ".", ".", "."],
    ["6", ".", ".", "1", "9", "5", ".", ".", "."],
    [".", "9", "8", ".", ".", ".", ".", "6", "."],
    ["8", ".", ".", ".", "6", ".", ".", ".", "3"],
    ["4", ".", ".", "8", ".", "3", ".", ".", "1"],
    ["7", ".", ".", ".", "2", ".", ".", ".", "6"],
    [".", "6", ".", ".", ".", ".", "2", "8", "."],
    [".", ".", ".", "4", ".", "8", ".", ".", "7"],
    [".", ".", ".", ".", "1", "9", ".", ".", "5"]
]

print("Initial Sudoku:")
print_board(board)

if solve_sudoku(board):
    print("\nSolved Sudoku:")
    print_board(board)
else:
    print("No solution exists.")
