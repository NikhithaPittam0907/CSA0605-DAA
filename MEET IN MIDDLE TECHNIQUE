from itertools import combinations

def subset_sums(arr):
    sums = set()
    for r in range(len(arr) + 1):
        for combo in combinations(arr, r):
            sums.add(sum(combo))
    return sorted(sums)

def closest_subset_sum(arr, target):
    mid = len(arr) // 2
    left_sums = subset_sums(arr[:mid])
    right_sums = subset_sums(arr[mid:])
    
    closest_sum = float('inf')
    
    for left in left_sums:
        right_target = target - left
        # Binary search for the closest right sum
        lo, hi = 0, len(right_sums) - 1
        while lo <= hi:
            mid = (lo + hi) // 2
            if right_sums[mid] < right_target:
                lo = mid + 1
            else:
                hi = mid - 1
        
        # Check the closest sums
        if lo < len(right_sums):
            closest_sum = min(closest_sum, abs(target - (left + right_sums[lo])))
        if hi >= 0:
            closest_sum = min(closest_sum, abs(target - (left + right_sums[hi])))
    
    return closest_sum

# Example usage
set_a = [45, 34, 4, 12, 5, 2]
target_a = 42
print("Closest sum to target in set A:", closest_subset_sum(set_a, target_a))

set_b = [1, 3, 2, 7, 4, 6]
target_b = 10
print("Closest sum to target in set B:", closest_subset_sum(set_b, target_b))
